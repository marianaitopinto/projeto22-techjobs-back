
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  id: number
  type: number
  name: string
  email: string
  password: string
  linkedin: string
}

/**
 * Model jobs
 * 
 */
export type jobs = {
  id: number
  companyId: number
  createdAt: Date
  status: string
}

/**
 * Model user_job
 * 
 */
export type user_job = {
  id: number
  cadidateId: number
  jobId: number
  status: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.jobs`: Exposes CRUD operations for the **jobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.jobs.findMany()
    * ```
    */
  get jobs(): Prisma.jobsDelegate<GlobalReject>;

  /**
   * `prisma.user_job`: Exposes CRUD operations for the **user_job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_jobs
    * const user_jobs = await prisma.user_job.findMany()
    * ```
    */
  get user_job(): Prisma.user_jobDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.1.1
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    jobs: 'jobs',
    user_job: 'user_job'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    jobs: number
    user_job: number
  }

  export type UsersCountOutputTypeSelect = {
    jobs?: boolean
    user_job?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type JobsCountOutputType
   */


  export type JobsCountOutputType = {
    user_job: number
  }

  export type JobsCountOutputTypeSelect = {
    user_job?: boolean
  }

  export type JobsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | JobsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? JobsCountOutputType
    : S extends undefined
    ? never
    : S extends JobsCountOutputTypeArgs
    ?'include' extends U
    ? JobsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof JobsCountOutputType ? JobsCountOutputType[P] : never
  } 
    : JobsCountOutputType
  : JobsCountOutputType




  // Custom InputTypes

  /**
   * JobsCountOutputType without action
   */
  export type JobsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the JobsCountOutputType
     * 
    **/
    select?: JobsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    type: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    type: number | null
    name: string | null
    email: string | null
    password: string | null
    linkedin: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    type: number | null
    name: string | null
    email: string | null
    password: string | null
    linkedin: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    type: number
    name: number
    email: number
    password: number
    linkedin: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    type?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    type?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    email?: true
    password?: true
    linkedin?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    email?: true
    password?: true
    linkedin?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    email?: true
    password?: true
    linkedin?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    type?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    linkedin?: boolean
    jobs?: boolean | jobsFindManyArgs
    user_job?: boolean | user_jobFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    jobs?: boolean | jobsFindManyArgs
    user_job?: boolean | user_jobFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['include'][P]>>  :
        P extends 'user_job' ? Array < user_jobGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['select'][P]>>  :
        P extends 'user_job' ? Array < user_jobGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    jobs<T extends jobsFindManyArgs = {}>(args?: Subset<T, jobsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<jobs>>, PrismaPromise<Array<jobsGetPayload<T>>>>;

    user_job<T extends user_jobFindManyArgs = {}>(args?: Subset<T, user_jobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_job>>, PrismaPromise<Array<user_jobGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model jobs
   */


  export type AggregateJobs = {
    _count: JobsCountAggregateOutputType | null
    _avg: JobsAvgAggregateOutputType | null
    _sum: JobsSumAggregateOutputType | null
    _min: JobsMinAggregateOutputType | null
    _max: JobsMaxAggregateOutputType | null
  }

  export type JobsAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type JobsSumAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type JobsMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    createdAt: Date | null
    status: string | null
  }

  export type JobsMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    createdAt: Date | null
    status: string | null
  }

  export type JobsCountAggregateOutputType = {
    id: number
    companyId: number
    createdAt: number
    status: number
    _all: number
  }


  export type JobsAvgAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type JobsSumAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type JobsMinAggregateInputType = {
    id?: true
    companyId?: true
    createdAt?: true
    status?: true
  }

  export type JobsMaxAggregateInputType = {
    id?: true
    companyId?: true
    createdAt?: true
    status?: true
  }

  export type JobsCountAggregateInputType = {
    id?: true
    companyId?: true
    createdAt?: true
    status?: true
    _all?: true
  }

  export type JobsAggregateArgs = {
    /**
     * Filter which jobs to aggregate.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobs
    **/
    _count?: true | JobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobsMaxAggregateInputType
  }

  export type GetJobsAggregateType<T extends JobsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobs[P]>
      : GetScalarType<T[P], AggregateJobs[P]>
  }




  export type JobsGroupByArgs = {
    where?: jobsWhereInput
    orderBy?: Enumerable<jobsOrderByWithAggregationInput>
    by: Array<JobsScalarFieldEnum>
    having?: jobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobsCountAggregateInputType | true
    _avg?: JobsAvgAggregateInputType
    _sum?: JobsSumAggregateInputType
    _min?: JobsMinAggregateInputType
    _max?: JobsMaxAggregateInputType
  }


  export type JobsGroupByOutputType = {
    id: number
    companyId: number
    createdAt: Date
    status: string
    _count: JobsCountAggregateOutputType | null
    _avg: JobsAvgAggregateOutputType | null
    _sum: JobsSumAggregateOutputType | null
    _min: JobsMinAggregateOutputType | null
    _max: JobsMaxAggregateOutputType | null
  }

  type GetJobsGroupByPayload<T extends JobsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobsGroupByOutputType[P]>
            : GetScalarType<T[P], JobsGroupByOutputType[P]>
        }
      >
    >


  export type jobsSelect = {
    id?: boolean
    companyId?: boolean
    createdAt?: boolean
    status?: boolean
    user?: boolean | usersArgs
    user_job?: boolean | user_jobFindManyArgs
    _count?: boolean | JobsCountOutputTypeArgs
  }

  export type jobsInclude = {
    user?: boolean | usersArgs
    user_job?: boolean | user_jobFindManyArgs
    _count?: boolean | JobsCountOutputTypeArgs
  }

  export type jobsGetPayload<
    S extends boolean | null | undefined | jobsArgs,
    U = keyof S
      > = S extends true
        ? jobs
    : S extends undefined
    ? never
    : S extends jobsArgs | jobsFindManyArgs
    ?'include' extends U
    ? jobs  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? usersGetPayload<S['include'][P]> :
        P extends 'user_job' ? Array < user_jobGetPayload<S['include'][P]>>  :
        P extends '_count' ? JobsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? usersGetPayload<S['select'][P]> :
        P extends 'user_job' ? Array < user_jobGetPayload<S['select'][P]>>  :
        P extends '_count' ? JobsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof jobs ? jobs[P] : never
  } 
    : jobs
  : jobs


  type jobsCountArgs = Merge<
    Omit<jobsFindManyArgs, 'select' | 'include'> & {
      select?: JobsCountAggregateInputType | true
    }
  >

  export interface jobsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Jobs that matches the filter.
     * @param {jobsFindUniqueArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends jobsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, jobsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'jobs'> extends True ? CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>> : CheckSelect<T, Prisma__jobsClient<jobs | null >, Prisma__jobsClient<jobsGetPayload<T> | null >>

    /**
     * Find the first Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindFirstArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends jobsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, jobsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'jobs'> extends True ? CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>> : CheckSelect<T, Prisma__jobsClient<jobs | null >, Prisma__jobsClient<jobsGetPayload<T> | null >>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.jobs.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.jobs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobsWithIdOnly = await prisma.jobs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends jobsFindManyArgs>(
      args?: SelectSubset<T, jobsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<jobs>>, PrismaPromise<Array<jobsGetPayload<T>>>>

    /**
     * Create a Jobs.
     * @param {jobsCreateArgs} args - Arguments to create a Jobs.
     * @example
     * // Create one Jobs
     * const Jobs = await prisma.jobs.create({
     *   data: {
     *     // ... data to create a Jobs
     *   }
     * })
     * 
    **/
    create<T extends jobsCreateArgs>(
      args: SelectSubset<T, jobsCreateArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Create many Jobs.
     *     @param {jobsCreateManyArgs} args - Arguments to create many Jobs.
     *     @example
     *     // Create many Jobs
     *     const jobs = await prisma.jobs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends jobsCreateManyArgs>(
      args?: SelectSubset<T, jobsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Jobs.
     * @param {jobsDeleteArgs} args - Arguments to delete one Jobs.
     * @example
     * // Delete one Jobs
     * const Jobs = await prisma.jobs.delete({
     *   where: {
     *     // ... filter to delete one Jobs
     *   }
     * })
     * 
    **/
    delete<T extends jobsDeleteArgs>(
      args: SelectSubset<T, jobsDeleteArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Update one Jobs.
     * @param {jobsUpdateArgs} args - Arguments to update one Jobs.
     * @example
     * // Update one Jobs
     * const jobs = await prisma.jobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends jobsUpdateArgs>(
      args: SelectSubset<T, jobsUpdateArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Delete zero or more Jobs.
     * @param {jobsDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.jobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends jobsDeleteManyArgs>(
      args?: SelectSubset<T, jobsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const jobs = await prisma.jobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends jobsUpdateManyArgs>(
      args: SelectSubset<T, jobsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Jobs.
     * @param {jobsUpsertArgs} args - Arguments to update or create a Jobs.
     * @example
     * // Update or create a Jobs
     * const jobs = await prisma.jobs.upsert({
     *   create: {
     *     // ... data to create a Jobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jobs we want to update
     *   }
     * })
    **/
    upsert<T extends jobsUpsertArgs>(
      args: SelectSubset<T, jobsUpsertArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Find one Jobs that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {jobsFindUniqueOrThrowArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends jobsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, jobsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Find the first Jobs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindFirstOrThrowArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends jobsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, jobsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__jobsClient<jobs>, Prisma__jobsClient<jobsGetPayload<T>>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.jobs.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends jobsCountArgs>(
      args?: Subset<T, jobsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobsAggregateArgs>(args: Subset<T, JobsAggregateArgs>): PrismaPromise<GetJobsAggregateType<T>>

    /**
     * Group by Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobsGroupByArgs['orderBy'] }
        : { orderBy?: JobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for jobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__jobsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    user_job<T extends user_jobFindManyArgs = {}>(args?: Subset<T, user_jobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_job>>, PrismaPromise<Array<user_jobGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * jobs base type for findUnique actions
   */
  export type jobsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where: jobsWhereUniqueInput
  }

  /**
   * jobs: findUnique
   */
  export interface jobsFindUniqueArgs extends jobsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jobs base type for findFirst actions
   */
  export type jobsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobs.
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobs.
     * 
    **/
    distinct?: Enumerable<JobsScalarFieldEnum>
  }

  /**
   * jobs: findFirst
   */
  export interface jobsFindFirstArgs extends jobsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jobs findMany
   */
  export type jobsFindManyArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobs.
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JobsScalarFieldEnum>
  }


  /**
   * jobs create
   */
  export type jobsCreateArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The data needed to create a jobs.
     * 
    **/
    data: XOR<jobsCreateInput, jobsUncheckedCreateInput>
  }


  /**
   * jobs createMany
   */
  export type jobsCreateManyArgs = {
    /**
     * The data used to create many jobs.
     * 
    **/
    data: Enumerable<jobsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * jobs update
   */
  export type jobsUpdateArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The data needed to update a jobs.
     * 
    **/
    data: XOR<jobsUpdateInput, jobsUncheckedUpdateInput>
    /**
     * Choose, which jobs to update.
     * 
    **/
    where: jobsWhereUniqueInput
  }


  /**
   * jobs updateMany
   */
  export type jobsUpdateManyArgs = {
    /**
     * The data used to update jobs.
     * 
    **/
    data: XOR<jobsUpdateManyMutationInput, jobsUncheckedUpdateManyInput>
    /**
     * Filter which jobs to update
     * 
    **/
    where?: jobsWhereInput
  }


  /**
   * jobs upsert
   */
  export type jobsUpsertArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The filter to search for the jobs to update in case it exists.
     * 
    **/
    where: jobsWhereUniqueInput
    /**
     * In case the jobs found by the `where` argument doesn't exist, create a new jobs with this data.
     * 
    **/
    create: XOR<jobsCreateInput, jobsUncheckedCreateInput>
    /**
     * In case the jobs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<jobsUpdateInput, jobsUncheckedUpdateInput>
  }


  /**
   * jobs delete
   */
  export type jobsDeleteArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter which jobs to delete.
     * 
    **/
    where: jobsWhereUniqueInput
  }


  /**
   * jobs deleteMany
   */
  export type jobsDeleteManyArgs = {
    /**
     * Filter which jobs to delete
     * 
    **/
    where?: jobsWhereInput
  }


  /**
   * jobs: findUniqueOrThrow
   */
  export type jobsFindUniqueOrThrowArgs = jobsFindUniqueArgsBase
      

  /**
   * jobs: findFirstOrThrow
   */
  export type jobsFindFirstOrThrowArgs = jobsFindFirstArgsBase
      

  /**
   * jobs without action
   */
  export type jobsArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
  }



  /**
   * Model user_job
   */


  export type AggregateUser_job = {
    _count: User_jobCountAggregateOutputType | null
    _avg: User_jobAvgAggregateOutputType | null
    _sum: User_jobSumAggregateOutputType | null
    _min: User_jobMinAggregateOutputType | null
    _max: User_jobMaxAggregateOutputType | null
  }

  export type User_jobAvgAggregateOutputType = {
    id: number | null
    cadidateId: number | null
    jobId: number | null
  }

  export type User_jobSumAggregateOutputType = {
    id: number | null
    cadidateId: number | null
    jobId: number | null
  }

  export type User_jobMinAggregateOutputType = {
    id: number | null
    cadidateId: number | null
    jobId: number | null
    status: string | null
  }

  export type User_jobMaxAggregateOutputType = {
    id: number | null
    cadidateId: number | null
    jobId: number | null
    status: string | null
  }

  export type User_jobCountAggregateOutputType = {
    id: number
    cadidateId: number
    jobId: number
    status: number
    _all: number
  }


  export type User_jobAvgAggregateInputType = {
    id?: true
    cadidateId?: true
    jobId?: true
  }

  export type User_jobSumAggregateInputType = {
    id?: true
    cadidateId?: true
    jobId?: true
  }

  export type User_jobMinAggregateInputType = {
    id?: true
    cadidateId?: true
    jobId?: true
    status?: true
  }

  export type User_jobMaxAggregateInputType = {
    id?: true
    cadidateId?: true
    jobId?: true
    status?: true
  }

  export type User_jobCountAggregateInputType = {
    id?: true
    cadidateId?: true
    jobId?: true
    status?: true
    _all?: true
  }

  export type User_jobAggregateArgs = {
    /**
     * Filter which user_job to aggregate.
     * 
    **/
    where?: user_jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<user_jobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_jobs
    **/
    _count?: true | User_jobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_jobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_jobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_jobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_jobMaxAggregateInputType
  }

  export type GetUser_jobAggregateType<T extends User_jobAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_job]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_job[P]>
      : GetScalarType<T[P], AggregateUser_job[P]>
  }




  export type User_jobGroupByArgs = {
    where?: user_jobWhereInput
    orderBy?: Enumerable<user_jobOrderByWithAggregationInput>
    by: Array<User_jobScalarFieldEnum>
    having?: user_jobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_jobCountAggregateInputType | true
    _avg?: User_jobAvgAggregateInputType
    _sum?: User_jobSumAggregateInputType
    _min?: User_jobMinAggregateInputType
    _max?: User_jobMaxAggregateInputType
  }


  export type User_jobGroupByOutputType = {
    id: number
    cadidateId: number
    jobId: number
    status: string
    _count: User_jobCountAggregateOutputType | null
    _avg: User_jobAvgAggregateOutputType | null
    _sum: User_jobSumAggregateOutputType | null
    _min: User_jobMinAggregateOutputType | null
    _max: User_jobMaxAggregateOutputType | null
  }

  type GetUser_jobGroupByPayload<T extends User_jobGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_jobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_jobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_jobGroupByOutputType[P]>
            : GetScalarType<T[P], User_jobGroupByOutputType[P]>
        }
      >
    >


  export type user_jobSelect = {
    id?: boolean
    cadidateId?: boolean
    jobId?: boolean
    status?: boolean
    job?: boolean | jobsArgs
    user?: boolean | usersArgs
  }

  export type user_jobInclude = {
    job?: boolean | jobsArgs
    user?: boolean | usersArgs
  }

  export type user_jobGetPayload<
    S extends boolean | null | undefined | user_jobArgs,
    U = keyof S
      > = S extends true
        ? user_job
    : S extends undefined
    ? never
    : S extends user_jobArgs | user_jobFindManyArgs
    ?'include' extends U
    ? user_job  & {
    [P in TrueKeys<S['include']>]:
        P extends 'job' ? jobsGetPayload<S['include'][P]> :
        P extends 'user' ? usersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'job' ? jobsGetPayload<S['select'][P]> :
        P extends 'user' ? usersGetPayload<S['select'][P]> :  P extends keyof user_job ? user_job[P] : never
  } 
    : user_job
  : user_job


  type user_jobCountArgs = Merge<
    Omit<user_jobFindManyArgs, 'select' | 'include'> & {
      select?: User_jobCountAggregateInputType | true
    }
  >

  export interface user_jobDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_job that matches the filter.
     * @param {user_jobFindUniqueArgs} args - Arguments to find a User_job
     * @example
     * // Get one User_job
     * const user_job = await prisma.user_job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_jobFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_jobFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_job'> extends True ? CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>> : CheckSelect<T, Prisma__user_jobClient<user_job | null >, Prisma__user_jobClient<user_jobGetPayload<T> | null >>

    /**
     * Find the first User_job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_jobFindFirstArgs} args - Arguments to find a User_job
     * @example
     * // Get one User_job
     * const user_job = await prisma.user_job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_jobFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_jobFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_job'> extends True ? CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>> : CheckSelect<T, Prisma__user_jobClient<user_job | null >, Prisma__user_jobClient<user_jobGetPayload<T> | null >>

    /**
     * Find zero or more User_jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_jobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_jobs
     * const user_jobs = await prisma.user_job.findMany()
     * 
     * // Get first 10 User_jobs
     * const user_jobs = await prisma.user_job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_jobWithIdOnly = await prisma.user_job.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_jobFindManyArgs>(
      args?: SelectSubset<T, user_jobFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_job>>, PrismaPromise<Array<user_jobGetPayload<T>>>>

    /**
     * Create a User_job.
     * @param {user_jobCreateArgs} args - Arguments to create a User_job.
     * @example
     * // Create one User_job
     * const User_job = await prisma.user_job.create({
     *   data: {
     *     // ... data to create a User_job
     *   }
     * })
     * 
    **/
    create<T extends user_jobCreateArgs>(
      args: SelectSubset<T, user_jobCreateArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Create many User_jobs.
     *     @param {user_jobCreateManyArgs} args - Arguments to create many User_jobs.
     *     @example
     *     // Create many User_jobs
     *     const user_job = await prisma.user_job.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_jobCreateManyArgs>(
      args?: SelectSubset<T, user_jobCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_job.
     * @param {user_jobDeleteArgs} args - Arguments to delete one User_job.
     * @example
     * // Delete one User_job
     * const User_job = await prisma.user_job.delete({
     *   where: {
     *     // ... filter to delete one User_job
     *   }
     * })
     * 
    **/
    delete<T extends user_jobDeleteArgs>(
      args: SelectSubset<T, user_jobDeleteArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Update one User_job.
     * @param {user_jobUpdateArgs} args - Arguments to update one User_job.
     * @example
     * // Update one User_job
     * const user_job = await prisma.user_job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_jobUpdateArgs>(
      args: SelectSubset<T, user_jobUpdateArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Delete zero or more User_jobs.
     * @param {user_jobDeleteManyArgs} args - Arguments to filter User_jobs to delete.
     * @example
     * // Delete a few User_jobs
     * const { count } = await prisma.user_job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_jobDeleteManyArgs>(
      args?: SelectSubset<T, user_jobDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_jobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_jobs
     * const user_job = await prisma.user_job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_jobUpdateManyArgs>(
      args: SelectSubset<T, user_jobUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_job.
     * @param {user_jobUpsertArgs} args - Arguments to update or create a User_job.
     * @example
     * // Update or create a User_job
     * const user_job = await prisma.user_job.upsert({
     *   create: {
     *     // ... data to create a User_job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_job we want to update
     *   }
     * })
    **/
    upsert<T extends user_jobUpsertArgs>(
      args: SelectSubset<T, user_jobUpsertArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Find one User_job that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_jobFindUniqueOrThrowArgs} args - Arguments to find a User_job
     * @example
     * // Get one User_job
     * const user_job = await prisma.user_job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_jobFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_jobFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Find the first User_job that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_jobFindFirstOrThrowArgs} args - Arguments to find a User_job
     * @example
     * // Get one User_job
     * const user_job = await prisma.user_job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_jobFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_jobFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_jobClient<user_job>, Prisma__user_jobClient<user_jobGetPayload<T>>>

    /**
     * Count the number of User_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_jobCountArgs} args - Arguments to filter User_jobs to count.
     * @example
     * // Count the number of User_jobs
     * const count = await prisma.user_job.count({
     *   where: {
     *     // ... the filter for the User_jobs we want to count
     *   }
     * })
    **/
    count<T extends user_jobCountArgs>(
      args?: Subset<T, user_jobCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_jobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_jobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_jobAggregateArgs>(args: Subset<T, User_jobAggregateArgs>): PrismaPromise<GetUser_jobAggregateType<T>>

    /**
     * Group by User_job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_jobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_jobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_jobGroupByArgs['orderBy'] }
        : { orderBy?: User_jobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_jobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_jobGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_jobClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    job<T extends jobsArgs = {}>(args?: Subset<T, jobsArgs>): CheckSelect<T, Prisma__jobsClient<jobs | null >, Prisma__jobsClient<jobsGetPayload<T> | null >>;

    user<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_job base type for findUnique actions
   */
  export type user_jobFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * Filter, which user_job to fetch.
     * 
    **/
    where: user_jobWhereUniqueInput
  }

  /**
   * user_job: findUnique
   */
  export interface user_jobFindUniqueArgs extends user_jobFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_job base type for findFirst actions
   */
  export type user_jobFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * Filter, which user_job to fetch.
     * 
    **/
    where?: user_jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<user_jobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_jobs.
     * 
    **/
    cursor?: user_jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_jobs.
     * 
    **/
    distinct?: Enumerable<User_jobScalarFieldEnum>
  }

  /**
   * user_job: findFirst
   */
  export interface user_jobFindFirstArgs extends user_jobFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_job findMany
   */
  export type user_jobFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * Filter, which user_jobs to fetch.
     * 
    **/
    where?: user_jobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<user_jobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_jobs.
     * 
    **/
    cursor?: user_jobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_jobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_jobScalarFieldEnum>
  }


  /**
   * user_job create
   */
  export type user_jobCreateArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * The data needed to create a user_job.
     * 
    **/
    data: XOR<user_jobCreateInput, user_jobUncheckedCreateInput>
  }


  /**
   * user_job createMany
   */
  export type user_jobCreateManyArgs = {
    /**
     * The data used to create many user_jobs.
     * 
    **/
    data: Enumerable<user_jobCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_job update
   */
  export type user_jobUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * The data needed to update a user_job.
     * 
    **/
    data: XOR<user_jobUpdateInput, user_jobUncheckedUpdateInput>
    /**
     * Choose, which user_job to update.
     * 
    **/
    where: user_jobWhereUniqueInput
  }


  /**
   * user_job updateMany
   */
  export type user_jobUpdateManyArgs = {
    /**
     * The data used to update user_jobs.
     * 
    **/
    data: XOR<user_jobUpdateManyMutationInput, user_jobUncheckedUpdateManyInput>
    /**
     * Filter which user_jobs to update
     * 
    **/
    where?: user_jobWhereInput
  }


  /**
   * user_job upsert
   */
  export type user_jobUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * The filter to search for the user_job to update in case it exists.
     * 
    **/
    where: user_jobWhereUniqueInput
    /**
     * In case the user_job found by the `where` argument doesn't exist, create a new user_job with this data.
     * 
    **/
    create: XOR<user_jobCreateInput, user_jobUncheckedCreateInput>
    /**
     * In case the user_job was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_jobUpdateInput, user_jobUncheckedUpdateInput>
  }


  /**
   * user_job delete
   */
  export type user_jobDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
    /**
     * Filter which user_job to delete.
     * 
    **/
    where: user_jobWhereUniqueInput
  }


  /**
   * user_job deleteMany
   */
  export type user_jobDeleteManyArgs = {
    /**
     * Filter which user_jobs to delete
     * 
    **/
    where?: user_jobWhereInput
  }


  /**
   * user_job: findUniqueOrThrow
   */
  export type user_jobFindUniqueOrThrowArgs = user_jobFindUniqueArgsBase
      

  /**
   * user_job: findFirstOrThrow
   */
  export type user_jobFindFirstOrThrowArgs = user_jobFindFirstArgsBase
      

  /**
   * user_job without action
   */
  export type user_jobArgs = {
    /**
     * Select specific fields to fetch from the user_job
     * 
    **/
    select?: user_jobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_jobInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UsersScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    email: 'email',
    password: 'password',
    linkedin: 'linkedin'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const JobsScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    createdAt: 'createdAt',
    status: 'status'
  };

  export type JobsScalarFieldEnum = (typeof JobsScalarFieldEnum)[keyof typeof JobsScalarFieldEnum]


  export const User_jobScalarFieldEnum: {
    id: 'id',
    cadidateId: 'cadidateId',
    jobId: 'jobId',
    status: 'status'
  };

  export type User_jobScalarFieldEnum = (typeof User_jobScalarFieldEnum)[keyof typeof User_jobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    type?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    linkedin?: StringFilter | string
    jobs?: JobsListRelationFilter
    user_job?: User_jobListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    linkedin?: SortOrder
    jobs?: jobsOrderByRelationAggregateInput
    user_job?: user_jobOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    linkedin?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    linkedin?: StringWithAggregatesFilter | string
  }

  export type jobsWhereInput = {
    AND?: Enumerable<jobsWhereInput>
    OR?: Enumerable<jobsWhereInput>
    NOT?: Enumerable<jobsWhereInput>
    id?: IntFilter | number
    companyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
    user?: XOR<UsersRelationFilter, usersWhereInput>
    user_job?: User_jobListRelationFilter
  }

  export type jobsOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    user?: usersOrderByWithRelationInput
    user_job?: user_jobOrderByRelationAggregateInput
  }

  export type jobsWhereUniqueInput = {
    id?: number
  }

  export type jobsOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    _count?: jobsCountOrderByAggregateInput
    _avg?: jobsAvgOrderByAggregateInput
    _max?: jobsMaxOrderByAggregateInput
    _min?: jobsMinOrderByAggregateInput
    _sum?: jobsSumOrderByAggregateInput
  }

  export type jobsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<jobsScalarWhereWithAggregatesInput>
    OR?: Enumerable<jobsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<jobsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    companyId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
  }

  export type user_jobWhereInput = {
    AND?: Enumerable<user_jobWhereInput>
    OR?: Enumerable<user_jobWhereInput>
    NOT?: Enumerable<user_jobWhereInput>
    id?: IntFilter | number
    cadidateId?: IntFilter | number
    jobId?: IntFilter | number
    status?: StringFilter | string
    job?: XOR<JobsRelationFilter, jobsWhereInput>
    user?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type user_jobOrderByWithRelationInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    job?: jobsOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
  }

  export type user_jobWhereUniqueInput = {
    id?: number
  }

  export type user_jobOrderByWithAggregationInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
    _count?: user_jobCountOrderByAggregateInput
    _avg?: user_jobAvgOrderByAggregateInput
    _max?: user_jobMaxOrderByAggregateInput
    _min?: user_jobMinOrderByAggregateInput
    _sum?: user_jobSumOrderByAggregateInput
  }

  export type user_jobScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_jobScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_jobScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_jobScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cadidateId?: IntWithAggregatesFilter | number
    jobId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type usersCreateInput = {
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    jobs?: jobsCreateNestedManyWithoutUserInput
    user_job?: user_jobCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    jobs?: jobsUncheckedCreateNestedManyWithoutUserInput
    user_job?: user_jobUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUpdateManyWithoutUserNestedInput
    user_job?: user_jobUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUncheckedUpdateManyWithoutUserNestedInput
    user_job?: user_jobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    type: number
    name: string
    email: string
    password: string
    linkedin: string
  }

  export type usersUpdateManyMutationInput = {
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
  }

  export type jobsCreateInput = {
    createdAt?: Date | string
    status: string
    user: usersCreateNestedOneWithoutJobsInput
    user_job?: user_jobCreateNestedManyWithoutJobInput
  }

  export type jobsUncheckedCreateInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    status: string
    user_job?: user_jobUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutJobsNestedInput
    user_job?: user_jobUpdateManyWithoutJobNestedInput
  }

  export type jobsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user_job?: user_jobUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobsCreateManyInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    status: string
  }

  export type jobsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type jobsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobCreateInput = {
    status: string
    job: jobsCreateNestedOneWithoutUser_jobInput
    user: usersCreateNestedOneWithoutUser_jobInput
  }

  export type user_jobUncheckedCreateInput = {
    id?: number
    cadidateId: number
    jobId: number
    status: string
  }

  export type user_jobUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    job?: jobsUpdateOneRequiredWithoutUser_jobNestedInput
    user?: usersUpdateOneRequiredWithoutUser_jobNestedInput
  }

  export type user_jobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cadidateId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobCreateManyInput = {
    id?: number
    cadidateId: number
    jobId: number
    status: string
  }

  export type user_jobUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cadidateId?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type JobsListRelationFilter = {
    every?: jobsWhereInput
    some?: jobsWhereInput
    none?: jobsWhereInput
  }

  export type User_jobListRelationFilter = {
    every?: user_jobWhereInput
    some?: user_jobWhereInput
    none?: user_jobWhereInput
  }

  export type jobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_jobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    linkedin?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    linkedin?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    linkedin?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type jobsCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type jobsAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type jobsMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type jobsMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type jobsSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type JobsRelationFilter = {
    is?: jobsWhereInput
    isNot?: jobsWhereInput
  }

  export type user_jobCountOrderByAggregateInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
  }

  export type user_jobAvgOrderByAggregateInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
  }

  export type user_jobMaxOrderByAggregateInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
  }

  export type user_jobMinOrderByAggregateInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
    status?: SortOrder
  }

  export type user_jobSumOrderByAggregateInput = {
    id?: SortOrder
    cadidateId?: SortOrder
    jobId?: SortOrder
  }

  export type jobsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUserInput>, Enumerable<jobsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUserInput>
    createMany?: jobsCreateManyUserInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type user_jobCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutUserInput>, Enumerable<user_jobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutUserInput>
    createMany?: user_jobCreateManyUserInputEnvelope
    connect?: Enumerable<user_jobWhereUniqueInput>
  }

  export type jobsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUserInput>, Enumerable<jobsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUserInput>
    createMany?: jobsCreateManyUserInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type user_jobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutUserInput>, Enumerable<user_jobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutUserInput>
    createMany?: user_jobCreateManyUserInputEnvelope
    connect?: Enumerable<user_jobWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type jobsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUserInput>, Enumerable<jobsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: jobsCreateManyUserInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type user_jobUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutUserInput>, Enumerable<user_jobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_jobUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_jobCreateManyUserInputEnvelope
    set?: Enumerable<user_jobWhereUniqueInput>
    disconnect?: Enumerable<user_jobWhereUniqueInput>
    delete?: Enumerable<user_jobWhereUniqueInput>
    connect?: Enumerable<user_jobWhereUniqueInput>
    update?: Enumerable<user_jobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_jobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_jobScalarWhereInput>
  }

  export type jobsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUserInput>, Enumerable<jobsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: jobsCreateManyUserInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type user_jobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutUserInput>, Enumerable<user_jobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_jobUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_jobCreateManyUserInputEnvelope
    set?: Enumerable<user_jobWhereUniqueInput>
    disconnect?: Enumerable<user_jobWhereUniqueInput>
    delete?: Enumerable<user_jobWhereUniqueInput>
    connect?: Enumerable<user_jobWhereUniqueInput>
    update?: Enumerable<user_jobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_jobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_jobScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutJobsInput = {
    create?: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
    connectOrCreate?: usersCreateOrConnectWithoutJobsInput
    connect?: usersWhereUniqueInput
  }

  export type user_jobCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutJobInput>, Enumerable<user_jobUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutJobInput>
    createMany?: user_jobCreateManyJobInputEnvelope
    connect?: Enumerable<user_jobWhereUniqueInput>
  }

  export type user_jobUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutJobInput>, Enumerable<user_jobUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutJobInput>
    createMany?: user_jobCreateManyJobInputEnvelope
    connect?: Enumerable<user_jobWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
    connectOrCreate?: usersCreateOrConnectWithoutJobsInput
    upsert?: usersUpsertWithoutJobsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutJobsInput, usersUncheckedUpdateWithoutJobsInput>
  }

  export type user_jobUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutJobInput>, Enumerable<user_jobUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<user_jobUpsertWithWhereUniqueWithoutJobInput>
    createMany?: user_jobCreateManyJobInputEnvelope
    set?: Enumerable<user_jobWhereUniqueInput>
    disconnect?: Enumerable<user_jobWhereUniqueInput>
    delete?: Enumerable<user_jobWhereUniqueInput>
    connect?: Enumerable<user_jobWhereUniqueInput>
    update?: Enumerable<user_jobUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<user_jobUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<user_jobScalarWhereInput>
  }

  export type user_jobUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<user_jobCreateWithoutJobInput>, Enumerable<user_jobUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<user_jobCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<user_jobUpsertWithWhereUniqueWithoutJobInput>
    createMany?: user_jobCreateManyJobInputEnvelope
    set?: Enumerable<user_jobWhereUniqueInput>
    disconnect?: Enumerable<user_jobWhereUniqueInput>
    delete?: Enumerable<user_jobWhereUniqueInput>
    connect?: Enumerable<user_jobWhereUniqueInput>
    update?: Enumerable<user_jobUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<user_jobUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<user_jobScalarWhereInput>
  }

  export type jobsCreateNestedOneWithoutUser_jobInput = {
    create?: XOR<jobsCreateWithoutUser_jobInput, jobsUncheckedCreateWithoutUser_jobInput>
    connectOrCreate?: jobsCreateOrConnectWithoutUser_jobInput
    connect?: jobsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUser_jobInput = {
    create?: XOR<usersCreateWithoutUser_jobInput, usersUncheckedCreateWithoutUser_jobInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_jobInput
    connect?: usersWhereUniqueInput
  }

  export type jobsUpdateOneRequiredWithoutUser_jobNestedInput = {
    create?: XOR<jobsCreateWithoutUser_jobInput, jobsUncheckedCreateWithoutUser_jobInput>
    connectOrCreate?: jobsCreateOrConnectWithoutUser_jobInput
    upsert?: jobsUpsertWithoutUser_jobInput
    connect?: jobsWhereUniqueInput
    update?: XOR<jobsUpdateWithoutUser_jobInput, jobsUncheckedUpdateWithoutUser_jobInput>
  }

  export type usersUpdateOneRequiredWithoutUser_jobNestedInput = {
    create?: XOR<usersCreateWithoutUser_jobInput, usersUncheckedCreateWithoutUser_jobInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_jobInput
    upsert?: usersUpsertWithoutUser_jobInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUser_jobInput, usersUncheckedUpdateWithoutUser_jobInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type jobsCreateWithoutUserInput = {
    createdAt?: Date | string
    status: string
    user_job?: user_jobCreateNestedManyWithoutJobInput
  }

  export type jobsUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    status: string
    user_job?: user_jobUncheckedCreateNestedManyWithoutJobInput
  }

  export type jobsCreateOrConnectWithoutUserInput = {
    where: jobsWhereUniqueInput
    create: XOR<jobsCreateWithoutUserInput, jobsUncheckedCreateWithoutUserInput>
  }

  export type jobsCreateManyUserInputEnvelope = {
    data: Enumerable<jobsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type user_jobCreateWithoutUserInput = {
    status: string
    job: jobsCreateNestedOneWithoutUser_jobInput
  }

  export type user_jobUncheckedCreateWithoutUserInput = {
    id?: number
    jobId: number
    status: string
  }

  export type user_jobCreateOrConnectWithoutUserInput = {
    where: user_jobWhereUniqueInput
    create: XOR<user_jobCreateWithoutUserInput, user_jobUncheckedCreateWithoutUserInput>
  }

  export type user_jobCreateManyUserInputEnvelope = {
    data: Enumerable<user_jobCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type jobsUpsertWithWhereUniqueWithoutUserInput = {
    where: jobsWhereUniqueInput
    update: XOR<jobsUpdateWithoutUserInput, jobsUncheckedUpdateWithoutUserInput>
    create: XOR<jobsCreateWithoutUserInput, jobsUncheckedCreateWithoutUserInput>
  }

  export type jobsUpdateWithWhereUniqueWithoutUserInput = {
    where: jobsWhereUniqueInput
    data: XOR<jobsUpdateWithoutUserInput, jobsUncheckedUpdateWithoutUserInput>
  }

  export type jobsUpdateManyWithWhereWithoutUserInput = {
    where: jobsScalarWhereInput
    data: XOR<jobsUpdateManyMutationInput, jobsUncheckedUpdateManyWithoutJobsInput>
  }

  export type jobsScalarWhereInput = {
    AND?: Enumerable<jobsScalarWhereInput>
    OR?: Enumerable<jobsScalarWhereInput>
    NOT?: Enumerable<jobsScalarWhereInput>
    id?: IntFilter | number
    companyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    status?: StringFilter | string
  }

  export type user_jobUpsertWithWhereUniqueWithoutUserInput = {
    where: user_jobWhereUniqueInput
    update: XOR<user_jobUpdateWithoutUserInput, user_jobUncheckedUpdateWithoutUserInput>
    create: XOR<user_jobCreateWithoutUserInput, user_jobUncheckedCreateWithoutUserInput>
  }

  export type user_jobUpdateWithWhereUniqueWithoutUserInput = {
    where: user_jobWhereUniqueInput
    data: XOR<user_jobUpdateWithoutUserInput, user_jobUncheckedUpdateWithoutUserInput>
  }

  export type user_jobUpdateManyWithWhereWithoutUserInput = {
    where: user_jobScalarWhereInput
    data: XOR<user_jobUpdateManyMutationInput, user_jobUncheckedUpdateManyWithoutUser_jobInput>
  }

  export type user_jobScalarWhereInput = {
    AND?: Enumerable<user_jobScalarWhereInput>
    OR?: Enumerable<user_jobScalarWhereInput>
    NOT?: Enumerable<user_jobScalarWhereInput>
    id?: IntFilter | number
    cadidateId?: IntFilter | number
    jobId?: IntFilter | number
    status?: StringFilter | string
  }

  export type usersCreateWithoutJobsInput = {
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    user_job?: user_jobCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutJobsInput = {
    id?: number
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    user_job?: user_jobUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutJobsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
  }

  export type user_jobCreateWithoutJobInput = {
    status: string
    user: usersCreateNestedOneWithoutUser_jobInput
  }

  export type user_jobUncheckedCreateWithoutJobInput = {
    id?: number
    cadidateId: number
    status: string
  }

  export type user_jobCreateOrConnectWithoutJobInput = {
    where: user_jobWhereUniqueInput
    create: XOR<user_jobCreateWithoutJobInput, user_jobUncheckedCreateWithoutJobInput>
  }

  export type user_jobCreateManyJobInputEnvelope = {
    data: Enumerable<user_jobCreateManyJobInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutJobsInput = {
    update: XOR<usersUpdateWithoutJobsInput, usersUncheckedUpdateWithoutJobsInput>
    create: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
  }

  export type usersUpdateWithoutJobsInput = {
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    user_job?: user_jobUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    user_job?: user_jobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_jobUpsertWithWhereUniqueWithoutJobInput = {
    where: user_jobWhereUniqueInput
    update: XOR<user_jobUpdateWithoutJobInput, user_jobUncheckedUpdateWithoutJobInput>
    create: XOR<user_jobCreateWithoutJobInput, user_jobUncheckedCreateWithoutJobInput>
  }

  export type user_jobUpdateWithWhereUniqueWithoutJobInput = {
    where: user_jobWhereUniqueInput
    data: XOR<user_jobUpdateWithoutJobInput, user_jobUncheckedUpdateWithoutJobInput>
  }

  export type user_jobUpdateManyWithWhereWithoutJobInput = {
    where: user_jobScalarWhereInput
    data: XOR<user_jobUpdateManyMutationInput, user_jobUncheckedUpdateManyWithoutUser_jobInput>
  }

  export type jobsCreateWithoutUser_jobInput = {
    createdAt?: Date | string
    status: string
    user: usersCreateNestedOneWithoutJobsInput
  }

  export type jobsUncheckedCreateWithoutUser_jobInput = {
    id?: number
    companyId: number
    createdAt?: Date | string
    status: string
  }

  export type jobsCreateOrConnectWithoutUser_jobInput = {
    where: jobsWhereUniqueInput
    create: XOR<jobsCreateWithoutUser_jobInput, jobsUncheckedCreateWithoutUser_jobInput>
  }

  export type usersCreateWithoutUser_jobInput = {
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    jobs?: jobsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutUser_jobInput = {
    id?: number
    type: number
    name: string
    email: string
    password: string
    linkedin: string
    jobs?: jobsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutUser_jobInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_jobInput, usersUncheckedCreateWithoutUser_jobInput>
  }

  export type jobsUpsertWithoutUser_jobInput = {
    update: XOR<jobsUpdateWithoutUser_jobInput, jobsUncheckedUpdateWithoutUser_jobInput>
    create: XOR<jobsCreateWithoutUser_jobInput, jobsUncheckedCreateWithoutUser_jobInput>
  }

  export type jobsUpdateWithoutUser_jobInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutJobsNestedInput
  }

  export type jobsUncheckedUpdateWithoutUser_jobInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutUser_jobInput = {
    update: XOR<usersUpdateWithoutUser_jobInput, usersUncheckedUpdateWithoutUser_jobInput>
    create: XOR<usersCreateWithoutUser_jobInput, usersUncheckedCreateWithoutUser_jobInput>
  }

  export type usersUpdateWithoutUser_jobInput = {
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutUser_jobInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    linkedin?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type jobsCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    status: string
  }

  export type user_jobCreateManyUserInput = {
    id?: number
    jobId: number
    status: string
  }

  export type jobsUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user_job?: user_jobUpdateManyWithoutJobNestedInput
  }

  export type jobsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user_job?: user_jobUncheckedUpdateManyWithoutJobNestedInput
  }

  export type jobsUncheckedUpdateManyWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    job?: jobsUpdateOneRequiredWithoutUser_jobNestedInput
  }

  export type user_jobUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobUncheckedUpdateManyWithoutUser_jobInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_jobCreateManyJobInput = {
    id?: number
    cadidateId: number
    status: string
  }

  export type user_jobUpdateWithoutJobInput = {
    status?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateOneRequiredWithoutUser_jobNestedInput
  }

  export type user_jobUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    cadidateId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}